"""
Как ясно из названия, римские цифры появились еще в Древнем Риме. Но даже после падения Римской
империи они продолжали использоваться на территории Европы вплоть до позднего Средневековья, а в
определенных случаях применяются и сегодня.
Римские цифры базируются на обозначениях M, D, C, L, X, V и I, соответствующих числам 1000, 500,
100, 50, 10, 5 и 1. В основном римские цифры в составляющих их числах располагаются в порядке
убывания – от больших к меньшим. В этом случае итоговое число равно сумме всех составляющих его
римских цифр. Если цифры меньшего номинала предшествуют цифрам большего номинала, то первые
вычитаются из вторых и итог прибавляется к общей сумме. В такой манере могут использоваться римские
цифры C, X и I. При этом вычитание производится только из чисел, максимум в десять раз превосходящих
вычитаемое. Таким образом, цифра I может предшествовать V или X, но не может вычитаться из L, C, D
или M. А значит, число 99 должно быть написано как XCIX, а не IC.
Создайте рекурсивную функцию, которая будет переводить римскую запись чисел в десятичную.
Функция должна обрабатывать один или два символа в начале строки, после чего будет производиться ее
рекурсивный вызов для оставшихся символов. Используйте пустую строку с возвращаемым значением 0 в
качестве базового случая. Также напишите основную программу, которая будет запрашивать у
пользователя число, введенное римскими цифрами, и отображать его десятичный эквивалент. При этом
можно сделать допуск о том, что пользователь всегда вводит корректное число, так что обработку
ошибок вам реализовывать не нужно.
"""


def convert_roman(roman_num):
    """conversion of roman numerals to decimal numerals
    :param roman_num: string from user with roman numeral
    :return: decimal numeral
    """
    dict_numb = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}

    temporary_decimal = 0
    if len(roman_num) == 1:
        temporary_decimal += dict_numb[roman_num[0]]
        return temporary_decimal
    if dict_numb[roman_num[0]] < dict_numb[roman_num[1]]:
        temporary_decimal -= dict_numb[roman_num[0]]
    elif dict_numb[roman_num[0]] == dict_numb[roman_num[1]]:
        temporary_decimal += dict_numb[roman_num[0]]
    else:
        temporary_decimal += dict_numb[roman_num[0]]

    return temporary_decimal + convert_roman(roman_num[1:])


if __name__ == '__main__':
    user_numb = input('Enter roman numerals for convert to decimal numeral: ')
    print(f'Decimal numeral: {convert_roman(user_numb)}')
